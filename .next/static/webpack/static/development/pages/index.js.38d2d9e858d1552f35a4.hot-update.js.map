{"version":3,"file":"static/webpack/static/development/pages/index.js.38d2d9e858d1552f35a4.hot-update.js","sources":["webpack:///./components/mobile/searchpanel/searchpanel.js"],"sourcesContent":["import Router from 'next/router'\nimport React from 'react'\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport { getCityList, getSearchParams } from '../../../redux/actions/search-actions'\n\nimport { httprequest_get } from '../../../common/utilities'\nimport { primary, secondary, white, text1, text6, blue2 } from '../../../config/common'\n\nimport Loader from '../loader/loader'\nimport Slider from '../slider/slider'\nimport Autocomplete from '../autocomplete/autocomplete'\nimport Datepicker from '../datepicker/datepicker'\n\nclass searchPanel extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            showLoader: false,\n            fromCity : '',\n            fromClass: 'slider bottom',\n            toCity : '',\n            toClass: 'slider bottom',\n            departDate : '',\n            showDate : '',\n            departClass: 'slider bottom'\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.search.cityList.length === 0) {\n            this.getCityList()\n        }\n    }\n\n    getCityList = () => {\n        const that = this\n        const cityRequest = httprequest_get(\"https://api.iamgds.com/api/CityList\", true)\n        cityRequest.onreadystatechange = function() {\n            if (this.readyState == 4 && this.status == 200) {\n                const cityList = JSON.parse(cityRequest.responseText).data\n                cityList && that.setState({ cityList })\n                // store.dispatch(getCityList(cityList))\n                const {dispatch} = that.props\n                dispatch(getCityList(cityList))\n            }\n        }\n    }\n\n    searchBus = (e) => {\n        this.setState({ showLoader: true })\n        e.preventDefault()\n        if (this.state.fromCity && this.state.toCity && this.state.departDate) {\n            const url = `/search/${this.state.fromCity}-to-${this.state.toCity}?departDate=${moment(this.state.departDate).format(\"DD-MM-YYYY\")}`\n            const {dispatch} = this.props\n            dispatch(getSearchParams(this.state.fromCity, this.state.toCity, moment(this.state.departDate).format(\"YYYY-MM-DD\")))\n            Router.push(\"/search\", url)\n            console.log(this.props)\n        } else {\n            alert(\"Please fill all the fields\")\n        }\n        this.setState({ showLoader: false })\n    }\n\n    render() {\n        return (\n            <div>\n                { this.state.showLoader && <Loader /> }\n                <style jsx>{`\n                    .srch-form {\n                        background: ${ primary };\n                        padding: 15px;\n                    }\n                    .srch-form>div {\n                        position: relative;\n                        background: ${ white };\n                        margin-bottom: 10px;\n                        border-radius: 3px;\n                    }\n                    .srch-form>div input {\n                        width: 100%;\n                        background: transparent;\n                        border: 0;\n                        outline: 0;\n                        height: 40px;\n                        color: ${ text1 };\n                        padding: 5px 5px 5px 65px;\n                    }\n                    .srch-form>div label {\n                        position: absolute;\n                        top: 10px;\n                        color: ${ text6 };\n                        left: 15px;\n                        font-size: 16px;\n                    }\n                    button {\n                        width: 100%;\n                        height: 40px;\n                        border: 0;\n                        background: ${ secondary };\n                        padding: 8px 10px;\n                        font-size: 14pt;\n                        font-weight: 400;\n                        color: ${ white };\n                        outline: 0;\n                        border-radius: 3px;\n                        box-shadow: rgba(0,0,0,.16) 0 1px 2px 0;\n                        text-transform: uppercase;\n                    }\n                    .next-day {\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                        position: absolute;\n                        right: 0;\n                        top: 0;\n                        bottom: 0;\n                        color: ${ white };\n                        background: ${ blue2 };\n                        border-radius: 0 3px 3px 0;\n                        width: 96px;\n                        text-align: center;\n                    }\n                `}</style>\n                <form onSubmit = { this.searchBus } className = \"srch-form\">\n                    <div onClick = { () => this.setState({ fromClass: 'slider bottom active' }) }>\n                        <input type = \"text\" placeholder = \"Starting city\" value = { this.state.fromCity } readOnly />\n                        <label>From:</label>\n                    </div>\n                    <div onClick = { () => this.setState({ toClass: 'slider bottom active' }) }>\n                        <input type = \"text\" placeholder = \"Destination city\" value = { this.state.toCity } readOnly />\n                        <label>To:</label>\n                    </div>\n                    <div onClick = { () => this.setState({ departClass: 'slider bottom active' }) }>\n                        <input type = \"text\" placeholder = \"Select journey date\" value = { this.state.showDate } readOnly />\n                        <label>Date:</label>\n                        <span className = \"next-day\">NEXT DAY</span>\n                    </div>\n                    <button type = \"submit\">Search bus</button>\n                </form>\n                <Slider classes = { this.state.fromClass } >\n                    {\n                        this.state.fromClass === 'slider bottom active' &&\n                        <Autocomplete\n                            list = { this.props.search.cityList }\n                            onSelect = { (sel) => this.setState({ fromCity: sel, toClass: 'slider bottom active' }) }\n                            selValue = { this.state.fromCity }\n                            label = 'From city'\n                            placeholder = 'Starting city'\n                            onClose = { () => this.setState({ fromClass: 'slider bottom' }) }\n                        />\n                    }\n                </Slider>\n                <Slider classes = { this.state.toClass } >\n                    {\n                        this.state.toClass === 'slider bottom active' &&\n                        <Autocomplete\n                            list = { this.props.search.cityList }\n                            onSelect = { (sel) => this.setState({ toCity: sel, departClass: 'slider bottom active' }) }\n                            selValue = { this.state.toCity }\n                            label = 'To city'\n                            placeholder = 'Destination city'\n                            onClose = { () => this.setState({ toClass: 'slider bottom' }) }\n                        />\n                    }\n                </Slider>\n                <Slider classes = { this.state.departClass } >\n                    {\n                        this.state.departClass === 'slider bottom active' &&\n                        <Datepicker\n                            from = { this.state.fromCity }\n                            to = { this.state.toCity }\n                            date = { this.state.showDate }\n                            onSelect = { (departDate, showDate) => this.setState({ departDate, showDate }) }\n                            onClose = { () => this.setState({ departClass: 'slider bottom' }) }\n                            searchBus = { this.searchBus }\n                        />\n                    }\n                </Slider>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = function(store) {\n    return (store)\n}\n\nexport default connect(mapStateToProps)(searchPanel)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAqBA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAjCA;AAmCA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAYA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AA+BA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0DA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AANA;AAUA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AANA;AAUA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAYA;;;;AAvKA;AACA;AAyKA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}